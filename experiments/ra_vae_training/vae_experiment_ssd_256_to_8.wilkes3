#!/bin/bash
#!
#! Example SLURM job script for Wilkes3 (AMD EPYC 7763, ConnectX-6, A100)
#! Last updated: Fri 30 Jul 11:07:58 BST 2021
#!

#!#############################################################
#!#### Modify the options in this section as appropriate ######
#!#############################################################

#! sbatch directives begin here ###############################

#! BATCH -J vae_exp
#! Which project should be charged (NB Wilkes2 projects end in '-GPU'):
#SBATCH -A NALLAPERUMA-SL3-GPU
#! How many whole nodes should be allocated?
#SBATCH --nodes=1
#! How many (MPI) tasks will there be in total? (one per GPU)
#SBATCH --ntasks=1
#! Specify the number of GPUs per node (between 1 and 4; must be 4 if nodes>1).
#! Note that the job submission script will enforce no more than 32 cpus per GPU.
#SBATCH --gres=gpu:1
#! How much wallclock time will be required?
#SBATCH --time=12:00:00
#! What types of email messages do you wish to receive?
#SBATCH --mail-type=ALL
#! Uncomment this to prevent the job from being requeued (e.g. if
#! interrupted by node failure or system downtime):
##SBATCH --no-requeue

#SBATCH --output=experiments/vae_training_experiments/hpc_runs/vae_ssd_256_to_8_training.out  # name of output filename

#! Do not change:
#SBATCH -p ampere

#! sbatch directives end here (put any additional directives above this line)

#! Notes:
#! Charging is determined by GPU number*walltime.

#! Number of nodes and tasks per node allocated by SLURM (do not change):
numnodes=$SLURM_JOB_NUM_NODES
numtasks=$SLURM_NTASKS
mpi_tasks_per_node=$(echo "$SLURM_TASKS_PER_NODE" | sed -e  's/^\([0-9][0-9]*\).*$/\1/')
#! ############################################################
#! Modify the settings below to specify the application's environment, location
#! and launch method:

#! Optionally modify the environment seen by the application
#! (note that SLURM reproduces the environment at submission irrespective of ~/.bashrc):
. /etc/profile.d/modules.sh                # Leave this line (enables the module command)
module purge                               # Removes all modules still loaded
module load rhel8/default-amp               # REQUIRED - loads the basic environment
module load miniconda/3                      # Load Anaconda for Conda support, adjust as necessary

conda init bash
#! source /usr/local/software/master/miniconda/3/etc/profile.d/conda.sh
source ~/.conda/envs/audiodiff_env_new/bin/activate
#! conda init audiodiff_env_new
conda activate audiodiff_env_new
   
# Activate your Conda environment
echo "Active conda environment: $(conda info --envs | grep '*' | awk '{print $1}')"
echo "Python version: $(python --version)"
echo "Python executable location: $(which python)"

application="~/.conda/envs/audiodiff_env_new/bin/python"
#! application="python"

#! Run options for the application:
options="/home/th716/rds/hpc-work/audio-diffusion/scripts/train_vae.py \
--dataset_name /home/th716/rds/hpc-work/audio-diffusion/cache/spotify_sleep_dataset/mel_spec_256_256 \
--batch_size 16 \
--ldm_config_file /home/th716/rds/hpc-work/audio-diffusion/config/ldm_autoencoder_kl.yaml \
--ldm_checkpoint_dir /home/th716/rds/hpc-work/audio-diffusion/models/ldm_vae_ssd_256_to_8 \
--hf_checkpoint_dir /home/th716/rds/hpc-work/audio-diffusion/models/vae_ssd_256_to_8 \
--gradient_accumulation_steps 1 \
--hop_length 256 \
--sample_rate 22050 \
--n_fft 1024 \
--save_images_batches 1000 \
--max_epochs 100 \
--resolution 256 \
--model_size medium \
--latent_dims 8,8"

CMD="$application $options"

workdir="/home/th716/rds/hpc-work/audio-diffusion"

###############################################################
### You should not have to change anything below this line ####
###############################################################

cd $workdir
echo -e "Changed directory to `pwd`.\n"

JOBID=$SLURM_JOB_ID

echo -e "JobID: $JOBID\n======"
echo "Time: `date`"
echo "Running on master node: `hostname`"
echo "Current directory: `pwd`"

if [ "$SLURM_JOB_NODELIST" ]; then
        #! Create a machine file:
        export NODEFILE=`generate_pbs_nodefile`
        cat $NODEFILE | uniq > machine.file.$JOBID
        echo -e "\nNodes allocated:\n================"
        echo `cat machine.file.$JOBID | sed -e 's/\..*$//g'`
fi

echo -e '\nnumtasks=$numtasks, numnodes=$numnodes, mpi_tasks_per_node=$mpi_tasks_per_node (OMP_NUM_THREADS=$OMP_NUM_THREADS)'

echo -e "\nExecuting command:\n==================\n$CMD\n"

eval $CMD
